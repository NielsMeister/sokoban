@startuml
'https://plantuml.com/class-diagramclass Position {


Launcher ---> SokobanMain
SokobanMain o--> Pilot
SokobanMain ---> Scenes
SokobanMain ---> AllLevelsDoneScene
SokobanMain ---> GameEndWinScene
SokobanMain ---> GamePlayScene
SokobanMain ---> GameStartScene
Pilot o--> Scenes
Board *--> BLOCK
Controller ---> BLOCK
Controller ---> Board
RootScene o--> Pilot
RootScene ---> Scenes
RootScene o--> Board
GameStartScene ---> Scenes
GamePlayScene o--> Controller
GamePlayScene o--> Board
GamePlayScene ---> Scenes
AllLevelsDoneScene ---> Scenes
GameEndWinScene ---> Scenes
GameStartScene o--> Pilot
GamePlayScene o--> Pilot
GameEndWinScene o--> Pilot
AllLevelsDoneScene o--> Pilot

class RootScene {
    # board : Board
    # pilot : Pilot
    # canvas : Canvas
    # gc : GraphicsContext
    # root : Group
    # backgroundImage : Image
    {static} - BLOCK_HEIGHT : int
    {static} - BLOCK_WIDTH : int
    + draw() : void
}

class GameEndWinScene extends RootScene {
    - action() : void
}

class GameStartScene extends RootScene {
    - action() : void
}

class AllLevelsDoneScene extends RootScene {
    - action() : void
}

class GamePlayScene extends RootScene {
    - controller : Controller
    - board : Board
    - drawMap() : void
    + handleOnKeyPress() : void
    - game() : void
    - handleLossOrWinException() : void
    - detectLossOrWin() : void
    - moveUp() : void
    - moveDown() : void
    - moveRight() : void
    - moveLeft() : void
}

class Board {
    - level : int
    - longestLineInMap : int
    - blocksToImages : HashMap <Block, Image>
    - lines : List<String>
    - board : BLock[][]
    - playerX : int
    - playerY : int
    + buildMap() : Block[][]
    + getLongestLineInMap() : int
    + setLongestLineInMap(int) : void
    + getLines() : List<String>
    + setLines(List<String>) : void
    + getLevel() : int
    + setLevel(int) : void
    + getPlayerX() : int
    + setPlayerX(int) : int
    + getPlayerY() : int
    + setPlayerY(int) : int
    + getBoard() : Board
    + setBoard(Board) : void
}

class Controller {
    # isGameOver : boolean
    + gameOverCheck(int, int, Block[][], Board) : void
    + move(Board, int, int) : void
    + eyesOnPortalCheck(Block[][]) : boolean
    + gameOverCheck() : boolean
    + setGameOver(boolean) : void
}

class Pilot {
    - stage : Stage
    - sceneMap : Map<Scenes, Scene>
    + registerScene(Scenes, Scene) : void
    + navigateTo(Scenes) : void
}

class SokobanMain {
    - pilot : Pilot
    + start(Stage) : void
}

class Launcher {
    + main(String[]) : void
}

enum Scenes {
    START_SCENE
    PLAY_SCENE
    WIN_SCENE
    ALLLEVELSDONESCENE
}

enum Block {
    GROUND_BLOCK
    OBSTACLE_BLOCK
    EYE_BLOCK
    OPERATOR_BLOCK
    PORTAL_BLOCK
    OPERATORONDESTINATION_BLOCK
    EYEONDESTINATION_BLOCK
}

@enduml
